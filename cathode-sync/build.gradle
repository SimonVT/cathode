import java.text.SimpleDateFormat

apply plugin: 'com.android.library'
apply plugin: 'checkstyle'

dependencies {
  implementation project(':cathode-common')
  implementation project(':cathode-images')
  implementation project(':cathode-jobqueue')
  annotationProcessor project(':cathode-jobqueue-compiler')
  implementation project(':cathode-provider')
  implementation project(':cathode-settings')
  implementation project(':trakt-api')
  implementation deps.dagger
  implementation deps.daggerAndroid
  implementation deps.daggerAndroidSupport
  annotationProcessor deps.daggerCompiler
  annotationProcessor deps.daggerAndroidApt
  implementation deps.retrofit
  implementation deps.schematic
  implementation deps.androidx.annotations
  implementation deps.timber
  implementation deps.tmdb

  implementation deps.firebase.crashlytics
}

android {
  compileSdkVersion parent.ext.compileSdkVersion
  buildToolsVersion parent.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion parent.ext.minSdkVersion
    targetSdkVersion parent.ext.targetSdkVersion

    versionCode = parent.ext.versionCode;
    versionName = parent.ext.versionName

    buildConfigField "String", "TRAKT_CLIENT_ID", "\"" + getTraktClientId() + "\""
    buildConfigField "String", "TRAKT_SECRET", "\"" + getTraktSecret() + "\""
    buildConfigField "String", "TRAKT_REDIRECT_URL", "\"" + getTraktRedirectUrl() + "\""
    buildConfigField "String", "TMDB_API_KEY", "\"" + getTmdbApiKey() + "\""
  }

  lintOptions {
    abortOnError false
  }

  buildTypes {
    debug {
      buildConfigField "String", "BUILD_TIME", "\"2016-01-01T00:00Z\""
    }
    release {
      buildConfigField "String", "BUILD_TIME", "\"" + buildTime() + "\""
    }
  }
}

def buildTime() {
  def date = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  date.setTimeZone(TimeZone.getTimeZone("UTC"))
  return date.format(new Date())
}

def getTraktClientId() {
  def clientId = getProperty('api', 'trakt.clientId')

  if (!clientId) {
    clientId = '8da90b18271eff4311d02c6b3c51f4925127c140fccf7f15bdbfe82a6f628c03'
  }

  return clientId
}

def getTraktSecret() {
  def secret = getProperty('api', 'trakt.secret')

  if (!secret) {
    secret = 'a6d4e2366529691707d97cbd42e4a2344b4141d1b7354e1f93900b0686961680'
  }

  return secret
}

def getTraktRedirectUrl() {
  def redirectUrl = getProperty('api', 'trakt.redirectUrl')

  if (!redirectUrl) {
    redirectUrl = 'cathode://oauth/authorize'
  }

  return redirectUrl
}

def getTmdbApiKey() {
  def redirectUrl = getProperty('api', 'tmdb.apiKey')

  return redirectUrl
}

checkstyle {
  configFile project.file('../config/checkstyle/checkstyle.xml')
  showViolations true
}

android.libraryVariants.all { variant ->
  def name = variant.buildType.name

  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  project.tasks.getByName("check").dependsOn checkstyle
}

apply from: rootProject.file('deps.gradle')
