apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'checkstyle'

dependencies {
  implementation project(':cathode-common')
  implementation project(':cathode-images')
  implementation project(':cathode-jobqueue')
  implementation project(':cathode-provider')
  implementation project(':cathode-settings')
  implementation project(':cathode-sync')
  implementation project(':trakt-api')
  implementation project(':libs:colorpicker')
  implementation project(':libs:datetimepicker')

  implementation deps.schematic
  annotationProcessor deps.schematicCompiler

  implementation deps.gson

  implementation deps.appcompat
  implementation deps.cardView
  implementation deps.recyclerView
  implementation deps.androidDesign

  implementation deps.dagger
  annotationProcessor deps.daggerCompiler
  implementation deps.picasso
  implementation deps.picassoOkHttp
  implementation deps.retrofit
  implementation deps.okhttp
  debugImplementation deps.okhttpLogger

  implementation deps.butterknife
  annotationProcessor deps.butterknifeCompiler
  implementation deps.timber

  implementation deps.dashclockApi

  implementation deps.tmdb

  implementation(deps.crashlytics) {
    transitive = true
  }

  lintChecks project(':cathode-lint')

  testImplementation deps.junit
  testImplementation deps.robolectric
  testImplementation deps.truth
}

android {
  compileSdkVersion parent.ext.compileSdkVersion
  buildToolsVersion parent.ext.buildToolsVersion

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    minSdkVersion parent.ext.minSdkVersion
    targetSdkVersion parent.ext.targetSdkVersion

    versionCode = parent.ext.versionCode
    versionName = parent.ext.versionName

    vectorDrawables.useSupportLibrary = true

    buildConfigField "String", "PROVIDER_AUTHORITY",
        "net.simonvt.cathode.provider.BuildConfig.PROVIDER_AUTHORITY"

    buildConfigField "String", "TRAKT_CLIENT_ID",
        "net.simonvt.cathode.sync.BuildConfig.TRAKT_CLIENT_ID"
    buildConfigField "String", "TRAKT_SECRET",
        "net.simonvt.cathode.sync.BuildConfig.TRAKT_SECRET"
    buildConfigField "String", "TRAKT_REDIRECT_URL",
        "net.simonvt.cathode.sync.BuildConfig.TRAKT_REDIRECT_URL"
    buildConfigField "String", "TMDB_API_KEY",
        "net.simonvt.cathode.sync.BuildConfig.TMDB_API_KEY"
  }

  signingConfigs {
    release
  }

  buildTypes {
    debug {
      buildConfigField "String", "AUTHORITY_DUMMY_CALENDAR",
          "\"net.simonvt.cathode.debug.calendar.DummyCalendarProvider\""
      resValue "string", "authority_dummy_calendar",
          "net.simonvt.cathode.debug.calendar.DummyCalendarProvider"

      applicationIdSuffix ".debug"

      ext.enableCrashlytics = false
    }
    release {
      buildConfigField "String", "AUTHORITY_DUMMY_CALENDAR",
          "\"net.simonvt.cathode.calendar.DummyCalendarProvider\""
      resValue "string", "authority_dummy_calendar",
          "net.simonvt.cathode.calendar.DummyCalendarProvider"

      signingConfig signingConfigs.release

      ext.enableCrashlytics = !isOnCI()
    }
  }

  dexOptions {
    preDexLibraries = !isOnCI()
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat = 'full'
  }
}

def isOnCI() {
  def ci = System.getenv('CI')
  return ci != null && ci == 'travis'
}

checkstyle {
  configFile project.file('../config/checkstyle/checkstyle.xml')
  showViolations true
}

android.applicationVariants.all { variant ->
  def name = variant.buildType.name

  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  project.tasks.getByName("check").dependsOn checkstyle
}

if (project.hasProperty('cathodeStoreFile')) {
  android.signingConfigs.release.storeFile = file(cathodeStoreFile)
}
if (project.hasProperty('cathodeStorePassword')) {
  android.signingConfigs.release.storePassword = cathodeStorePassword
}
if (project.hasProperty('cathodeKeyPassword')) {
  android.signingConfigs.release.keyPassword = cathodeKeyPassword
}
if (project.hasProperty('cathodeKeyAlias')) {
  android.signingConfigs.release.keyAlias = cathodeKeyAlias
}

if (isOnCI()) {
  printf 'Running on Travis-CI'
  android.signingConfigs.release.storeFile = android.signingConfigs.debug.storeFile
  android.signingConfigs.release.storePassword = android.signingConfigs.debug.storePassword
  android.signingConfigs.release.keyPassword = android.signingConfigs.debug.keyPassword
  android.signingConfigs.release.keyAlias = android.signingConfigs.debug.keyAlias
}

apply from: rootProject.file('deps.gradle')
